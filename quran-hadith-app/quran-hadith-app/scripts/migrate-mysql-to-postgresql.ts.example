/**
 * Migration script to transfer data from Railway MySQL to Railway PostgreSQL
 *
 * IMPORTANT: Copy this file to migrate-mysql-to-postgresql.ts and replace URLs with actual credentials
 * DO NOT commit the actual file with credentials to git
 *
 * This script migrates all data while preserving relationships and IDs
 */

import { PrismaClient as PrismaClientMySQL } from '@prisma/client';
import { PrismaClient as PrismaClientPostgreSQL } from '@prisma/client';

// MySQL connection (source)
const mysqlUrl = process.env.SOURCE_DATABASE_URL || 'mysql://user:password@host:port/database';
const mysqlClient = new PrismaClientMySQL({
  datasources: {
    db: {
      url: mysqlUrl,
    },
  },
});

// PostgreSQL connection (destination)
const postgresUrl = process.env.DATABASE_URL || 'postgresql://user:password@host:port/database';
const postgresClient = new PrismaClientPostgreSQL({
  datasources: {
    db: {
      url: postgresUrl,
    },
  },
});

async function migrate() {
  console.log('🚀 Starting migration from MySQL to PostgreSQL...\n');

  try {
    // Connect to both databases
    await mysqlClient.$connect();
    await postgresClient.$connect();
    console.log('✅ Connected to both databases\n');

    // Migration logic here...
    // (Full migration code would go here - keeping this as example template)

    console.log('\n🎉 Migration completed successfully!');

  } catch (error) {
    console.error('❌ Migration failed:', error);
    throw error;
  } finally {
    await mysqlClient.$disconnect();
    await postgresClient.$disconnect();
  }
}

// Run migration
migrate()
  .then(() => {
    console.log('\n✨ All done! Your data has been migrated to PostgreSQL.');
    process.exit(0);
  })
  .catch((error) => {
    console.error('\n💥 Fatal error:', error);
    process.exit(1);
  });
